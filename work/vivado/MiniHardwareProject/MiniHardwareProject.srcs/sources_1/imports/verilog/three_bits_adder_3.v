/*
   This file was generated automatically by Alchitry Labs version 1.2.0.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module three_bits_adder_3 (
    input [2:0] x,
    input [2:0] y,
    input cin,
    output reg cout,
    output reg [2:0] s
  );
  
  
  
  wire [(2'h3+0)-1:0] M_fullAdder_s;
  wire [(2'h3+0)-1:0] M_fullAdder_cout;
  reg [(2'h3+0)-1:0] M_fullAdder_cin;
  reg [(2'h3+0)-1:0] M_fullAdder_x;
  reg [(2'h3+0)-1:0] M_fullAdder_y;
  
  genvar GEN_fullAdder0;
  generate
  for (GEN_fullAdder0=0;GEN_fullAdder0<2'h3;GEN_fullAdder0=GEN_fullAdder0+1) begin: fullAdder_gen_0
    full_adder_6 fullAdder (
      .cin(M_fullAdder_cin[GEN_fullAdder0*(1)+(1)-1-:(1)]),
      .x(M_fullAdder_x[GEN_fullAdder0*(1)+(1)-1-:(1)]),
      .y(M_fullAdder_y[GEN_fullAdder0*(1)+(1)-1-:(1)]),
      .s(M_fullAdder_s[GEN_fullAdder0*(1)+(1)-1-:(1)]),
      .cout(M_fullAdder_cout[GEN_fullAdder0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  always @* begin
    M_fullAdder_x = x;
    M_fullAdder_y = y;
    M_fullAdder_cin[0+0-:1] = cin;
    s = M_fullAdder_s;
    cout = M_fullAdder_cout[2+0-:1];
    M_fullAdder_cin[1+1-:2] = M_fullAdder_cout[0+1-:2];
  end
endmodule
