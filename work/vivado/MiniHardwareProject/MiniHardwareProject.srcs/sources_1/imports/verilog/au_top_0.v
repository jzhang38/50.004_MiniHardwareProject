/*
   This file was generated automatically by Alchitry Labs version 1.2.0.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [2:0] customout,
    input [1:0] customin
  );
  
  
  
  reg rst;
  
  wire [3-1:0] M_miniHardwareProject_signal;
  wire [2-1:0] M_miniHardwareProject_led_sum;
  wire [1-1:0] M_miniHardwareProject_result_indicator;
  reg [1-1:0] M_miniHardwareProject_s;
  reg [1-1:0] M_miniHardwareProject_cout;
  reg [1-1:0] M_miniHardwareProject_mode;
  reg [3-1:0] M_miniHardwareProject_manual;
  incrementer_1 miniHardwareProject (
    .clk(clk),
    .rst(io_button[0+0-:1]),
    .s(M_miniHardwareProject_s),
    .cout(M_miniHardwareProject_cout),
    .mode(M_miniHardwareProject_mode),
    .manual(M_miniHardwareProject_manual),
    .signal(M_miniHardwareProject_signal),
    .led_sum(M_miniHardwareProject_led_sum),
    .result_indicator(M_miniHardwareProject_result_indicator)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    customout = M_miniHardwareProject_signal;
    io_led[16+0+2-:3] = M_miniHardwareProject_signal;
    io_led[8+0+1-:2] = M_miniHardwareProject_led_sum;
    io_led[0+0+0-:1] = M_miniHardwareProject_result_indicator;
    M_miniHardwareProject_manual = io_dip[16+0+2-:3];
    M_miniHardwareProject_mode = io_dip[8+0+0-:1];
    M_miniHardwareProject_s = customin[0+0-:1];
    M_miniHardwareProject_cout = customin[1+0-:1];
  end
endmodule
